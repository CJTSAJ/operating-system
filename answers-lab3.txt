1.What is the purpose of having an individual handler function for each exception/interrupt? 
(i.e., if all exceptions/interrupts were delivered to the same handler, what feature that exists in the current implementation could not be provided?)
答：因为不是每一个exceptions/interrupts都有错误号，如果用同一个handler，则无法区分错误。

2.Did you have to do anything to make the user/softint program behave correctly? 
The grade script expects it to produce a general protection fault (trap 13), but softint's code says int $14. 
Why should this produce interrupt vector 13? 
What happens if the kernel actually allows softint's int $14 instruction to invoke the kernel's page fault handler (which is interrupt vector 14)?
答：因为用户没有权限去产生14的错误号，导致系统发生了13错误号；可以修改trap_init()内14号错误的权限为3(用户)

3.The break point test case will either generate a break point exception or a general protection fault depending on how you initialized the break point entry in the IDT
 (i.e., your call to SETGATE from trap_init). Why? 
How do you need to set it up in order to get the breakpoint exception to work as specified above and what incorrect setup would cause it to trigger a general protection fault?
答：如果break point exception初始化时权限为0，则用户没有权限出发该错误，导致系统发生13号错误。权限设置为3，泽科正常出发break point exception.

4.What do you think is the point of these mechanisms, particularly in light of what the user/softint test program does?
答：给错误号设置权限，防止用户程序恶意去出发，导致系统发生安全漏洞。